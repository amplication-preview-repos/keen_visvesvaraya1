/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Marks } from "./Marks";
import { MarksCountArgs } from "./MarksCountArgs";
import { MarksFindManyArgs } from "./MarksFindManyArgs";
import { MarksFindUniqueArgs } from "./MarksFindUniqueArgs";
import { CreateMarksArgs } from "./CreateMarksArgs";
import { UpdateMarksArgs } from "./UpdateMarksArgs";
import { DeleteMarksArgs } from "./DeleteMarksArgs";
import { Student } from "../../student/base/Student";
import { MarksService } from "../marks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Marks)
export class MarksResolverBase {
  constructor(
    protected readonly service: MarksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "read",
    possession: "any",
  })
  async _marksItemsMeta(
    @graphql.Args() args: MarksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Marks])
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "read",
    possession: "any",
  })
  async marksItems(@graphql.Args() args: MarksFindManyArgs): Promise<Marks[]> {
    return this.service.marksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Marks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "read",
    possession: "own",
  })
  async marks(
    @graphql.Args() args: MarksFindUniqueArgs
  ): Promise<Marks | null> {
    const result = await this.service.marks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Marks)
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "create",
    possession: "any",
  })
  async createMarks(@graphql.Args() args: CreateMarksArgs): Promise<Marks> {
    return await this.service.createMarks({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Marks)
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "update",
    possession: "any",
  })
  async updateMarks(
    @graphql.Args() args: UpdateMarksArgs
  ): Promise<Marks | null> {
    try {
      return await this.service.updateMarks({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Marks)
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "delete",
    possession: "any",
  })
  async deleteMarks(
    @graphql.Args() args: DeleteMarksArgs
  ): Promise<Marks | null> {
    try {
      return await this.service.deleteMarks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(@graphql.Parent() parent: Marks): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
