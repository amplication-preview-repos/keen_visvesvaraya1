/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Marks as PrismaMarks,
  Student as PrismaStudent,
} from "@prisma/client";

export class MarksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MarksCountArgs, "select">): Promise<number> {
    return this.prisma.marks.count(args);
  }

  async marksItems<T extends Prisma.MarksFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MarksFindManyArgs>
  ): Promise<PrismaMarks[]> {
    return this.prisma.marks.findMany<Prisma.MarksFindManyArgs>(args);
  }
  async marks<T extends Prisma.MarksFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MarksFindUniqueArgs>
  ): Promise<PrismaMarks | null> {
    return this.prisma.marks.findUnique(args);
  }
  async createMarks<T extends Prisma.MarksCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MarksCreateArgs>
  ): Promise<PrismaMarks> {
    return this.prisma.marks.create<T>(args);
  }
  async updateMarks<T extends Prisma.MarksUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MarksUpdateArgs>
  ): Promise<PrismaMarks> {
    return this.prisma.marks.update<T>(args);
  }
  async deleteMarks<T extends Prisma.MarksDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MarksDeleteArgs>
  ): Promise<PrismaMarks> {
    return this.prisma.marks.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.marks
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
