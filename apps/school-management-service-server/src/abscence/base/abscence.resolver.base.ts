/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Abscence } from "./Abscence";
import { AbscenceCountArgs } from "./AbscenceCountArgs";
import { AbscenceFindManyArgs } from "./AbscenceFindManyArgs";
import { AbscenceFindUniqueArgs } from "./AbscenceFindUniqueArgs";
import { CreateAbscenceArgs } from "./CreateAbscenceArgs";
import { UpdateAbscenceArgs } from "./UpdateAbscenceArgs";
import { DeleteAbscenceArgs } from "./DeleteAbscenceArgs";
import { Student } from "../../student/base/Student";
import { AbscenceService } from "../abscence.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Abscence)
export class AbscenceResolverBase {
  constructor(
    protected readonly service: AbscenceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "read",
    possession: "any",
  })
  async _abscencesMeta(
    @graphql.Args() args: AbscenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Abscence])
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "read",
    possession: "any",
  })
  async abscences(
    @graphql.Args() args: AbscenceFindManyArgs
  ): Promise<Abscence[]> {
    return this.service.abscences(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Abscence, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "read",
    possession: "own",
  })
  async abscence(
    @graphql.Args() args: AbscenceFindUniqueArgs
  ): Promise<Abscence | null> {
    const result = await this.service.abscence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Abscence)
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "create",
    possession: "any",
  })
  async createAbscence(
    @graphql.Args() args: CreateAbscenceArgs
  ): Promise<Abscence> {
    return await this.service.createAbscence({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Abscence)
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "update",
    possession: "any",
  })
  async updateAbscence(
    @graphql.Args() args: UpdateAbscenceArgs
  ): Promise<Abscence | null> {
    try {
      return await this.service.updateAbscence({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Abscence)
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "delete",
    possession: "any",
  })
  async deleteAbscence(
    @graphql.Args() args: DeleteAbscenceArgs
  ): Promise<Abscence | null> {
    try {
      return await this.service.deleteAbscence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: Abscence
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
