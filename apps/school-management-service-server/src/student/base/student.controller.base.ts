/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StudentService } from "../student.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StudentCreateInput } from "./StudentCreateInput";
import { Student } from "./Student";
import { StudentFindManyArgs } from "./StudentFindManyArgs";
import { StudentWhereUniqueInput } from "./StudentWhereUniqueInput";
import { StudentUpdateInput } from "./StudentUpdateInput";
import { AbscenceFindManyArgs } from "../../abscence/base/AbscenceFindManyArgs";
import { Abscence } from "../../abscence/base/Abscence";
import { AbscenceWhereUniqueInput } from "../../abscence/base/AbscenceWhereUniqueInput";
import { MarksFindManyArgs } from "../../marks/base/MarksFindManyArgs";
import { Marks } from "../../marks/base/Marks";
import { MarksWhereUniqueInput } from "../../marks/base/MarksWhereUniqueInput";
import { RemarksFindManyArgs } from "../../remarks/base/RemarksFindManyArgs";
import { Remarks } from "../../remarks/base/Remarks";
import { RemarksWhereUniqueInput } from "../../remarks/base/RemarksWhereUniqueInput";
import { SignUpInput } from "../SignUpInput";
import { SignUpOutput } from "../SignUpOutput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StudentControllerBase {
  constructor(
    protected readonly service: StudentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Student })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStudent(
    @common.Body() data: StudentCreateInput
  ): Promise<Student> {
    return await this.service.createStudent({
      data: {
        ...data,

        major: data.major
          ? {
              connect: data.major,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dob: true,
        email: true,
        id: true,

        major: {
          select: {
            id: true,
          },
        },

        name: true,
        password: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Student] })
  @ApiNestedQuery(StudentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async students(@common.Req() request: Request): Promise<Student[]> {
    const args = plainToClass(StudentFindManyArgs, request.query);
    return this.service.students({
      ...args,
      select: {
        createdAt: true,
        dob: true,
        email: true,
        id: true,

        major: {
          select: {
            id: true,
          },
        },

        name: true,
        password: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async student(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    const result = await this.service.student({
      where: params,
      select: {
        createdAt: true,
        dob: true,
        email: true,
        id: true,

        major: {
          select: {
            id: true,
          },
        },

        name: true,
        password: true,
        role: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStudent(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() data: StudentUpdateInput
  ): Promise<Student | null> {
    try {
      return await this.service.updateStudent({
        where: params,
        data: {
          ...data,

          major: data.major
            ? {
                connect: data.major,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dob: true,
          email: true,
          id: true,

          major: {
            select: {
              id: true,
            },
          },

          name: true,
          password: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Student })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStudent(
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Student | null> {
    try {
      return await this.service.deleteStudent({
        where: params,
        select: {
          createdAt: true,
          dob: true,
          email: true,
          id: true,

          major: {
            select: {
              id: true,
            },
          },

          name: true,
          password: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/abscences")
  @ApiNestedQuery(AbscenceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Abscence",
    action: "read",
    possession: "any",
  })
  async findAbscences(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Abscence[]> {
    const query = plainToClass(AbscenceFindManyArgs, request.query);
    const results = await this.service.findAbscences(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,
        reason: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/abscences")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectAbscences(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AbscenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abscences: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/abscences")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateAbscences(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AbscenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abscences: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/abscences")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectAbscences(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: AbscenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abscences: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/marksItems")
  @ApiNestedQuery(MarksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Marks",
    action: "read",
    possession: "any",
  })
  async findMarksItems(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Marks[]> {
    const query = plainToClass(MarksFindManyArgs, request.query);
    const results = await this.service.findMarksItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        score: true,

        student: {
          select: {
            id: true,
          },
        },

        subject: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/marksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectMarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: MarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marksItems: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/marksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateMarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: MarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marksItems: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/marksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectMarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: MarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marksItems: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/remarksItems")
  @ApiNestedQuery(RemarksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "read",
    possession: "any",
  })
  async findRemarksItems(
    @common.Req() request: Request,
    @common.Param() params: StudentWhereUniqueInput
  ): Promise<Remarks[]> {
    const query = plainToClass(RemarksFindManyArgs, request.query);
    const results = await this.service.findRemarksItems(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/remarksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async connectRemarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: RemarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remarksItems: {
        connect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/remarksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async updateRemarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: RemarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remarksItems: {
        set: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/remarksItems")
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "update",
    possession: "any",
  })
  async disconnectRemarksItems(
    @common.Param() params: StudentWhereUniqueInput,
    @common.Body() body: RemarksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remarksItems: {
        disconnect: body,
      },
    };
    await this.service.updateStudent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/sign-up")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SignUp(
    @common.Body()
    body: SignUpInput
  ): Promise<string> {
    return this.service.SignUp(body);
  }

  @common.Post("/student-sign-up")
  @swagger.ApiOkResponse({
    type: SignUpOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async StudentSignUp(
    @common.Body()
    body: SignUpInput
  ): Promise<SignUpOutput> {
    return this.service.StudentSignUp(body);
  }
}
