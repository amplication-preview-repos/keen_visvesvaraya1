/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AbscenceListRelationFilter } from "../../abscence/base/AbscenceListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { MajorWhereUniqueInput } from "../../major/base/MajorWhereUniqueInput";
import { MarksListRelationFilter } from "../../marks/base/MarksListRelationFilter";
import { RemarksListRelationFilter } from "../../remarks/base/RemarksListRelationFilter";
import { EnumStudentRole } from "./EnumStudentRole";

@InputType()
class StudentWhereInput {
  @ApiProperty({
    required: false,
    type: () => AbscenceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AbscenceListRelationFilter)
  @IsOptional()
  @Field(() => AbscenceListRelationFilter, {
    nullable: true,
  })
  abscences?: AbscenceListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dob?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => MajorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MajorWhereUniqueInput)
  @IsOptional()
  @Field(() => MajorWhereUniqueInput, {
    nullable: true,
  })
  major?: MajorWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => MarksListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MarksListRelationFilter)
  @IsOptional()
  @Field(() => MarksListRelationFilter, {
    nullable: true,
  })
  marksItems?: MarksListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  password?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RemarksListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RemarksListRelationFilter)
  @IsOptional()
  @Field(() => RemarksListRelationFilter, {
    nullable: true,
  })
  remarksItems?: RemarksListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumStudentRole,
  })
  @IsEnum(EnumStudentRole)
  @IsOptional()
  @Field(() => EnumStudentRole, {
    nullable: true,
  })
  role?: "Option1";
}

export { StudentWhereInput as StudentWhereInput };
