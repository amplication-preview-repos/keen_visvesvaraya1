/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Major as PrismaMajor,
  Student as PrismaStudent,
} from "@prisma/client";

export class MajorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MajorCountArgs, "select">): Promise<number> {
    return this.prisma.major.count(args);
  }

  async majors<T extends Prisma.MajorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MajorFindManyArgs>
  ): Promise<PrismaMajor[]> {
    return this.prisma.major.findMany<Prisma.MajorFindManyArgs>(args);
  }
  async major<T extends Prisma.MajorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MajorFindUniqueArgs>
  ): Promise<PrismaMajor | null> {
    return this.prisma.major.findUnique(args);
  }
  async createMajor<T extends Prisma.MajorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MajorCreateArgs>
  ): Promise<PrismaMajor> {
    return this.prisma.major.create<T>(args);
  }
  async updateMajor<T extends Prisma.MajorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MajorUpdateArgs>
  ): Promise<PrismaMajor> {
    return this.prisma.major.update<T>(args);
  }
  async deleteMajor<T extends Prisma.MajorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MajorDeleteArgs>
  ): Promise<PrismaMajor> {
    return this.prisma.major.delete(args);
  }

  async findStudents(
    parentId: string,
    args: Prisma.StudentFindManyArgs
  ): Promise<PrismaStudent[]> {
    return this.prisma.major
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .students(args);
  }
}
