/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Remarks as PrismaRemarks,
  Student as PrismaStudent,
} from "@prisma/client";

export class RemarksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RemarksCountArgs, "select">): Promise<number> {
    return this.prisma.remarks.count(args);
  }

  async remarksItems<T extends Prisma.RemarksFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemarksFindManyArgs>
  ): Promise<PrismaRemarks[]> {
    return this.prisma.remarks.findMany<Prisma.RemarksFindManyArgs>(args);
  }
  async remarks<T extends Prisma.RemarksFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemarksFindUniqueArgs>
  ): Promise<PrismaRemarks | null> {
    return this.prisma.remarks.findUnique(args);
  }
  async createRemarks<T extends Prisma.RemarksCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemarksCreateArgs>
  ): Promise<PrismaRemarks> {
    return this.prisma.remarks.create<T>(args);
  }
  async updateRemarks<T extends Prisma.RemarksUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemarksUpdateArgs>
  ): Promise<PrismaRemarks> {
    return this.prisma.remarks.update<T>(args);
  }
  async deleteRemarks<T extends Prisma.RemarksDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemarksDeleteArgs>
  ): Promise<PrismaRemarks> {
    return this.prisma.remarks.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.remarks
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
