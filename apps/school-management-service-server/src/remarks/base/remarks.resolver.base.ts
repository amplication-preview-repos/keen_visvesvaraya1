/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Remarks } from "./Remarks";
import { RemarksCountArgs } from "./RemarksCountArgs";
import { RemarksFindManyArgs } from "./RemarksFindManyArgs";
import { RemarksFindUniqueArgs } from "./RemarksFindUniqueArgs";
import { CreateRemarksArgs } from "./CreateRemarksArgs";
import { UpdateRemarksArgs } from "./UpdateRemarksArgs";
import { DeleteRemarksArgs } from "./DeleteRemarksArgs";
import { Student } from "../../student/base/Student";
import { RemarksService } from "../remarks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Remarks)
export class RemarksResolverBase {
  constructor(
    protected readonly service: RemarksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "read",
    possession: "any",
  })
  async _remarksItemsMeta(
    @graphql.Args() args: RemarksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Remarks])
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "read",
    possession: "any",
  })
  async remarksItems(
    @graphql.Args() args: RemarksFindManyArgs
  ): Promise<Remarks[]> {
    return this.service.remarksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Remarks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "read",
    possession: "own",
  })
  async remarks(
    @graphql.Args() args: RemarksFindUniqueArgs
  ): Promise<Remarks | null> {
    const result = await this.service.remarks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Remarks)
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "create",
    possession: "any",
  })
  async createRemarks(
    @graphql.Args() args: CreateRemarksArgs
  ): Promise<Remarks> {
    return await this.service.createRemarks({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Remarks)
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "update",
    possession: "any",
  })
  async updateRemarks(
    @graphql.Args() args: UpdateRemarksArgs
  ): Promise<Remarks | null> {
    try {
      return await this.service.updateRemarks({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Remarks)
  @nestAccessControl.UseRoles({
    resource: "Remarks",
    action: "delete",
    possession: "any",
  })
  async deleteRemarks(
    @graphql.Args() args: DeleteRemarksArgs
  ): Promise<Remarks | null> {
    try {
      return await this.service.deleteRemarks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(@graphql.Parent() parent: Remarks): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
